var App = require('./bindings').App;

var decorate = require('./util').decorate,
    inherit = require('./util').inherit;

module.exports = function createDialog(o){
  return types[o.type](o);
}

var types = {
  folder: function(o){ return new FolderDialog(o) },
  file: function(o){ return new FileDialog(o) },
  font: function(o){ return new FontDialog(o) },
  color: function(o){ return new ColorDialog(o) },
};


// ######################
// ### TypeIdentifier ###
// ######################

function TypeIdentifier(name){
  if (!(this instanceof TypeIdentifier)) {
    return new TypeIdentifier(ext);
  }

  this.name = (''+name).replace(/^\*?\.?/, '');
  if (this.name in TypeIdentifier.types) {
    return TypeIdentifier.types[this.name];
  }
  TypeIdentifier.types[this.name] = this;

  this.ext = new RegExp('\.'+this.name+'$');
}

TypeIdentifier.types = Object.create(null);


decorate(TypeIdentifier.prototype, [
  function toFilter(){
    return '*.'+this.name;
  },
  function toString(){
    return '.'+this.name;
  },
  function extTest(path){
    return this.ext.test(''+path);
  },
  function extFilter(paths){
    paths = Array.isArray(paths) ? paths : [paths];
    return paths.filter(this.extTest.bind(this));
  }
]);



// ##################
// ### FileFilter ###
// ##################

function FileFilter(label, types){
  this.types = [].concat(types).map(function(type){
    return type instanceof TypeIdentifier ? type : new TypeIdentifier(type);
  });
}

decorate(FileFilter.prototype, [

]);


FileFilter.prototype.toString = ({
  win32: function toString(){
    var labels = [],
        filters = [];
    this.types.forEach(function(type){
      labels.push(type.toString());
      filters.push(type.toFilter());
    });
    return this.label + ' ('+labels.join(';')+')'+'\0'+filters.join(';');
  },
  linux: function toString(){
    return this.label + ':' + this.types.join(';');
  },
  darwin: function toString(){
    return this.types.map(function(type){
      return type.name;
    }).join(',');
  }
}[process.platform]);





// ##############
// ### Dialog ###
// ##############

function Dialog(parent, o){
  this.parent = parent;
}

decorate(Dialog.prototype, [
  function open(){
    App.openDialog(this.type, this.parent, this);
  }
]);


// ##################
// ### FileDialog ###
// ##################

function FileDialog(parent, o){
  Dialog.apply(this, arguments);
  this.filters = [];

  if (Array.isArray(o.filters)) {
    this.filters.push(new FileFilter('File Formats', o.filters));
  } else if (isObject(o.filters)) {
    Object.keys(o.filters).forEach(function(label){
      this.filters.push(new FileFilter(label, o.filters[label]));
    }, this);

    this.type = o.type || 'open';
    this.multifile = 'multifile' in o ? !!o.multifile : false;
    this.directory = o.directory || process.cwd();
  }
}

inherit(FileDialog, Dialog, {
  type: 1,
  acceptTypes: null
}, [

]);


// ####################
// ### FolderDialog ###
// ####################

function FolderDialog(parent, o){
  Dialog.apply(this, arguments);
}

inherit(FolderDialog, Dialog, {
  type: 1
});



// ###################
// ### ColorDialog ###
// ###################

function ColorDialog(parent, o){
  Dialog.apply(this, arguments);
}

inherit(ColorDialog, Dialog, {
  type: 1
});



// ##################
// ### FontDialog ###
// ##################

function FontDialog(o){
  Dialog.apply(this, arguments);
}

inherit(FontDialog, Dialog, {
  type: 1
});
